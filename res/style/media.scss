@use "sass:math";
@use "sass:list";

$xs: 320px;
$sm: 768px;
$md: 1024px;
$lg: 1200px;
$xl: 1600px;
$xxl: 1920px;

@function strip-unit($value) {
    @if math.is-unitless($value) or list.index('px', math.unit($value)) == null {
      @error "Property \"#{$value}\" must be in px unit.";
    }
    @else {
        @return $value * 1;
    }
}

@function pxToRem($px) {
    $result: calc($px / 16px * 1rem);
    @return #{$result};
}

@function fv($minValuePx, $maxValuePx, $minViewportPx, $maxViewportPx, $unitStr: vw) {
    $minValuePx: strip-unit($minValuePx);
    $maxValuePx: strip-unit($maxValuePx);
    $minViewportPx: strip-unit($minViewportPx);
    $maxViewportPx: strip-unit($maxViewportPx);

    $slope: calc(($maxValuePx - $minValuePx) / ($maxViewportPx - $minViewportPx));
    $slopeToUnit: $slope * 100;
    $intersectRem: pxToRem($minValuePx - $slope * $minViewportPx);

    $minValueRem: pxToRem(min($minValuePx, $maxValuePx));
    $maxValueRem: pxToRem(max($minValuePx, $maxValuePx));

	$result: clamp(#{$minValueRem}, #{$slopeToUnit}#{$unitStr} + #{$intersectRem}, #{$maxValueRem});
    @return #{$result};
}

@function rv($valuePx, $viewportPx, $unitStr:vw) {
    $valuePx: strip-unit($valuePx);
    $viewportPx: strip-unit($viewportPx);

    $result: $valuePx / ($viewportPx / 100) * 1 + $unitStr;
	@return #{$result};
} 
